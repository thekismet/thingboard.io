#include <Wire.h>
#include <SPI.h>
//#include <Adafruit_Sensor.h>
//#include "Adafruit_BME680.h"
#include <SoftwareSerial.h>
SoftwareSerial pmsSerial(2, 3);
#include <PubSubClient.h>
#include <ESP8266WiFi.h>

//#define BME_SCK 13
//#define BME_MISO 12
//#define BME_MOSI 11
//#define BME_CS 10
//#define SEALEVELPRESSURE_HPA (1013.25)

//Adafruit_BME680 bme; // I2C
//Adafruit_BME680 bme(BME_CS); // hardware SPI
//Adafruit_BME680 bme(BME_CS, BME_MOSI, BME_MISO,  BME_SCK);

struct pms5003data {
  uint16_t framelen;
  uint16_t pm10_standard, pm25_standard, pm100_standard;
  uint16_t pm10_env, pm25_env, pm100_env;
  uint16_t particles_03um, particles_05um, particles_10um, particles_25um, particles_50um, particles_100um;
  uint16_t unused;
  uint16_t checksum;
};
 
struct pms5003data data;

#define WIFI_AP "xxxxxxxxxx"
#define WIFI_PASSWORD "xxxxxxxxxx"
#define TOKEN "xxxxxxxxxx"
char thingsboardServer[] = "xxxxxxxxxx";

WiFiClient wifiClient;

PubSubClient client(wifiClient);

int status = WL_IDLE_STATUS;
unsigned long lastSend;

void setup() {
  Serial.begin(115200);
  // sensor baud rate is 9600
  pmsSerial.begin(9600);
  while (!Serial);
  //Serial.println(F("BME680"));
  delay(10);
  InitWiFi();
  client.setServer( thingsboardServer, 1883 );
  lastSend = 0;

  //if (!bme.begin()) {
    //Serial.println("Could not find a valid sensors, check wiring!");
    //while (1);
  //}

  // Set up oversampling and filter initialization
  //bme.setTemperatureOversampling(BME680_OS_8X);
  //bme.setHumidityOversampling(BME680_OS_2X);
  //bme.setPressureOversampling(BME680_OS_4X);
  //bme.setIIRFilterSize(BME680_FILTER_SIZE_3);
  //bme.setGasHeater(320, 150); // 320*C for 150 ms
}

void loop() {
  if ( !client.connected() ) {
    reconnect();
  }

  if ( millis() - lastSend > 60000 ) { // Update and send only after 1 seconds
    //getAndSendTemperatureAndHumidityData();
    (readPMSdata(&pmsSerial));
    lastSend = millis();
  }

  client.loop();
}

void readPMSdata()
//getAndSendTemperatureAndHumidityData()
{
  Serial.println("Collecting data.");
  // Read temperature as Celsius (the default)
  //float t = (bme.temperature - 2.3);
  // Read pressure
  //float p = (bme.pressure / 100.0);
  // Read humidity
  //float h = (bme.humidity);
  // Read gas_resistance
  //float g = (bme.gas_resistance / 1000.0);    
  // Read altitude
  //float a = (bme.readAltitude(SEALEVELPRESSURE_HPA));
  
  float pms10 = (data.pm10_standard);
  float pms25 = (data.pm25_standard);
  float pms100 = (data.pm100_standard);
  float pme10 = (data.pm10_env);
  float pme25 = (data.pm25_env);
  float pme100 = (data.pm100_env);
  
  // Check if any reads failed and exit early (to try again).
  if (isnan(pms10) || isnan(pms25) || isnan(pms100) || isnan(pme10) || isnan(pme25) || isnan(pme100)) 
  //if (isnan(t) || isnan(p) || isnan(h) || isnan(g) || isnan(a)) 
  {
    Serial.println("Failed to read from sensors!");
    return;
  }

  //if (! bme.performReading()) {
    //Serial.println("Failed to perform reading :(");
    //return;
  //}
  //Serial.print("Temperature = ");
  //Serial.print(bme.temperature - 2.3);
  //Serial.println(" *C");

  //Serial.print("Pressure = ");
  //Serial.print(bme.pressure / 100.0);
  //Serial.println(" hPa");

  //Serial.print("Humidity = ");
  //Serial.print(bme.humidity);
  //Serial.println(" %");

  //Serial.print("Gas = ");
  //Serial.print(bme.gas_resistance / 1000.0);
  //Serial.println(" KOhms");

  //Serial.print("Approx. Altitude = ");
  //Serial.print(bme.readAltitude(SEALEVELPRESSURE_HPA));
  //Serial.println(" m");

  Serial.print("PM 1.0 standard = ");
  Serial.print(data.pm10_standard);
  Serial.println(" um");

  Serial.print("PM 2.5 standard = ");
  Serial.print(data.pm25_standard);
  Serial.println(" um");

  Serial.print("PM 10 standard = ");
  Serial.print(data.pm100_standard);
  Serial.println(" um");

  Serial.print("PM 1.0 environment = ");
  Serial.print(data.pm10_env);
  Serial.println(" um");

  Serial.print("PM 2.5 environment = ");
  Serial.print(data.pm25_env);
  Serial.println(" um");

  Serial.print("PM 10 environment = ");
  Serial.print(data.pm100_env);
  Serial.println(" um");

  Serial.println();
  delay(2000);

  //String temperature = String(t);
  //String pressure = String(p);
  //String humidity = String(h);
  //String gas = String(g);
  //String altitude = String(a);
  String pmson = String(pms10);
  String pmstf = String(pms25);
  String pmste = String(pms100);
  String pmeon = String(pme10);
  String pmetf = String(pme25);
  String pmete = String(pme100);

  // Just debug messages
  Serial.print( "Sending data : [" );
  //Serial.print( temperature ); Serial.print( "," );
  //Serial.print( pressure ); Serial.print( "," );
  //Serial.print( humidity ); Serial.print( "," );
  //Serial.print( gas ); Serial.print( "," );
  //Serial.print( altitude );
  Serial.print( pmson ); Serial.print( "," );
  Serial.print( pmstf ); Serial.print( "," );
  Serial.print( pmste ); Serial.print( "," );
  Serial.print( pmeon ); Serial.print( "," );
  Serial.print( pmetf ); Serial.print( "," );
  Serial.print( pmete );
  Serial.print( "]   -> " );

  // Prepare a JSON payload string
  String payload = "{";
  //payload += "\"temperature\":"; payload += temperature; payload += ",";
  //payload += "\"pressure\":"; payload += pressure; payload += ",";
  //payload += "\"humidity\":"; payload += humidity; payload += ",";
  //payload += "\"gas\":"; payload += gas; payload += ",";
  //payload += "\"altitude\":"; payload += altitude;
  payload += "\"pmson\":"; payload += pmson; payload += ",";
  payload += "\"pmstf\":"; payload += pmstf; payload += ",";
  payload += "\"pmste\":"; payload += pmste; payload += ",";
  payload += "\"pmeon\":"; payload += pmeon; payload += ",";
  payload += "\"pmetf\":"; payload += pmetf; payload += ",";
  payload += "\"pmete\":"; payload += pmete;
  payload += "}";

  // Send payload
  char attributes[100];
  payload.toCharArray( attributes, 100 );
  client.publish( "v1/devices/me/telemetry", attributes );
  Serial.println( attributes );

}

void InitWiFi()
{
  Serial.println("Connecting to AP ...");
  // attempt to connect to WiFi network

  WiFi.begin(WIFI_AP, WIFI_PASSWORD);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("Connected to AP");
}


void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    status = WiFi.status();
    if ( status != WL_CONNECTED) {
      WiFi.begin(WIFI_AP, WIFI_PASSWORD);
      while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
      }
      Serial.println("Connected to AP");
    }
    Serial.print("Connecting to ThingsBoard node ...");
    // Attempt to connect (clientId, username, password)
    if ( client.connect("ESP8266 Device", TOKEN, NULL) ) {
      Serial.println( "[DONE]" );
    } else {
      Serial.print( "[FAILED] [ rc = " );
      Serial.print( client.state() );
      Serial.println( " : retrying in 5 seconds]" );
      // Wait 5 seconds before retrying
      delay( 5000 );
    }
  }
}

boolean readPMSdata(Stream *s) {
  if (! s->available()) {
    return false;
  }
  
  // Read a byte at a time until we get to the special '0x42' start-byte
  if (s->peek() != 0x42) {
    s->read();
    return false;
  }
 
  // Now read all 32 bytes
  if (s->available() < 32) {
    return false;
  }
    
  uint8_t buffer[32];    
  uint16_t sum = 0;
  s->readBytes(buffer, 32);
 
  // get checksum ready
  for (uint8_t i=0; i<30; i++) {
    sum += buffer[i];
  }
 
  /* debugging
  for (uint8_t i=2; i<32; i++) {
    Serial.print("0x"); Serial.print(buffer[i], HEX); Serial.print(", ");
  }
  Serial.println();
  */
  
  // The data comes in endian'd, this solves it so it works on all platforms
  uint16_t buffer_u16[15];
  for (uint8_t i=0; i<15; i++) {
    buffer_u16[i] = buffer[2 + i*2 + 1];
    buffer_u16[i] += (buffer[2 + i*2] << 8);
  }
 
  // put it into a nice struct :)
  memcpy((void *)&data, (void *)buffer_u16, 30);
 
  if (sum != data.checksum) {
    Serial.println("Checksum failure");
    return false;
  }
  // success!
  return true;
}
