#include <Wire.h>
#include <SPI.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>
#include <PubSubClient.h>
#include <ESP8266WiFi.h>
#include <SoftwareSerial.h>
#define LENG 31   //0x42 + 31 bytes equal to 32 bytes
unsigned char buf[LENG];

int PM01Value=0;          //define PM1.0 value of the air detector module
int PM2_5Value=0;         //define PM2.5 value of the air detector module
int PM10Value=0;         //define PM10 value of the air detector module

SoftwareSerial PMSerial(2, 3); // RX, TX

#define BME_SCK 13
#define BME_MISO 12
#define BME_MOSI 11
#define BME_CS 10

#define SEALEVELPRESSURE_HPA (1013.25)

#define WIFI_AP "XXXXXXXXXX"
#define WIFI_PASSWORD "XXXXXXXXXX"

#define TOKEN "XXXXXXXXXX"

char thingsboardServer[] = "XXXXXXXXXX";

WiFiClient wifiClient;

PubSubClient client(wifiClient);

int status = WL_IDLE_STATUS;
unsigned long lastSend;

Adafruit_BME280 bme; // I2C
//Adafruit_BME280 bme(BME_CS); // hardware SPI
//Adafruit_BME280 bme(BME_CS, BME_MOSI, BME_MISO, BME_SCK); // software SPI

void setup()
{
  Serial.begin(115200);
  PMSerial.begin(9600);   
  PMSerial.setTimeout(1500);
  Serial.println(F("sensing")); 
  delay(10);
  InitWiFi();
  client.setServer( thingsboardServer, 1883 );
  lastSend = 0;

  bool status;

  status = bme.begin();
  if (!status)
  {
    Serial.println("Could not find a valid sensors, check wiring!");
    while (1);
  }
}

void loop()
{
  if ( !client.connected() ) {
    reconnect();
  }

  if(PMSerial.find(0x42)){    
    PMSerial.readBytes(buf,LENG);

    if(buf[0] == 0x4d){
      if(checkValue(buf,LENG)){
        PM01Value=transmitPM01(buf); //count PM1.0 value of the air detector module
        PM2_5Value=transmitPM2_5(buf);//count PM2.5 value of the air detector module
        PM10Value=transmitPM10(buf); //count PM10 value of the air detector module 
      }           
    } 
  }

  if ( millis() - lastSend > 20000 ) { // Update and send only after 20 seconds
    getAndSendTemperatureAndHumidityData();
    lastSend = millis();
  }

  static unsigned long OledTimer=millis();  
    if (millis() - OledTimer >=1000) 
    {
      OledTimer=millis(); 
    }

  client.loop();
}

void getAndSendTemperatureAndHumidityData()
{
  Serial.println("Collecting data.");

  // Reading data takes about 250 milliseconds!
  float pms01 = (PM01Value);
  float pms25 = (PM2_5Value);
  float pms10 = (PM10Value);

  float t = (bme.readTemperature());
  float p = (bme.readPressure() / 100.0F);
  float a = (bme.readAltitude(SEALEVELPRESSURE_HPA));
  float h = (bme.readHumidity());

  // Check if any reads failed and exit early (to try again).
  if (isnan(pms01) || isnan(pms25) || isnan(pms10) || isnan(t) || isnan(p) || isnan(a) || isnan(h)) {
    Serial.println("Failed to read from sensor!");
    return;
  }
  
  Serial.print("PM1.0: ");
  Serial.print(PM01Value);
  Serial.println("  ug/m3");
  
  Serial.print("PM2.5: ");
  Serial.print(PM2_5Value);
  Serial.println("  ug/m3");
  
  Serial.print("PM1 0: ");
  Serial.print(PM10Value);
  Serial.println("  ug/m3");
  Serial.println();

  Serial.print("Temperature: ");
  Serial.print(t);
  Serial.println(" *C ");
  
  Serial.print("Pressure: ");
  Serial.print(p);
  Serial.println(" hPa");

  Serial.print("Altitude: ");
  Serial.print(a);
  Serial.println(" m");

  Serial.print("Humidity: ");
  Serial.print(h);
  Serial.println(" %");
  Serial.println();

  String pms1 = String(pms01);
  String pms2 = String(pms25);
  String pms3 = String(pms10);
  String temperature = String(t);
  String pressure = String(p);
  String altitude = String(a);
  String humidity = String(h);

  // Just debug messages
  Serial.print( "Sending data : [" );
  Serial.print( pms1 ); Serial.print( "," );
  Serial.print( pms2 ); Serial.print( "," );
  Serial.print( pms3 ); Serial.print( "," );
  Serial.print( temperature ); Serial.print( "," );
  Serial.print( pressure ); Serial.print( "," );
  Serial.print( altitude ); Serial.print( "," );
  Serial.print( humidity );
  Serial.print( "]   -> " );

  // Prepare a JSON payload string
  String payload = "{";
  payload += "\"pms1\":"; payload += pms1; payload += ",";
  payload += "\"pms2\":"; payload += pms2; payload += ",";
  payload += "\"pms3\":"; payload += pms3; payload += ",";
  payload += "\"temperature\":"; payload += temperature; payload += ",";
  payload += "\"pressure\":"; payload += pressure; payload += ",";
  payload += "\"altitude\":"; payload += altitude; payload += ",";
  payload += "\"humidity\":"; payload += humidity;
  payload += "}";

  // Send payload
  char attributes[100];
  payload.toCharArray( attributes, 100 );
  client.publish( "v1/devices/me/telemetry", attributes );
  Serial.println( attributes );

}

char checkValue(unsigned char *thebuf, char leng)
{  
  char receiveflag=0;
  int receiveSum=0;

  for(int i=0; i<(leng-2); i++){
  receiveSum=receiveSum+thebuf[i];
  }
  receiveSum=receiveSum + 0x42;
 
  if(receiveSum == ((thebuf[leng-2]<<8)+thebuf[leng-1]))  //check the serial data 
  {
    receiveSum = 0;
    receiveflag = 1;
  }
  return receiveflag;
}

int transmitPM01(unsigned char *thebuf)
{
  int PM01Val;
  PM01Val=((thebuf[3]<<8) + thebuf[4]); //count PM1.0 value of the air detector module
  return PM01Val;
}

//transmit PM Value to PC
int transmitPM2_5(unsigned char *thebuf)
{
  int PM2_5Val;
  PM2_5Val=((thebuf[5]<<8) + thebuf[6]);//count PM2.5 value of the air detector module
  return PM2_5Val;
  }

//transmit PM Value to PC
int transmitPM10(unsigned char *thebuf)
{
  int PM10Val;
  PM10Val=((thebuf[7]<<8) + thebuf[8]); //count PM10 value of the air detector module  
  return PM10Val;
}

void InitWiFi()
{
  Serial.println("Connecting to AP ...");
  // attempt to connect to WiFi network

  WiFi.begin(WIFI_AP, WIFI_PASSWORD);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("Connected to AP");
}


void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    status = WiFi.status();
    if ( status != WL_CONNECTED) {
      WiFi.begin(WIFI_AP, WIFI_PASSWORD);
      while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
      }
      Serial.println("Connected to AP");
    }
    Serial.print("Connecting to ThingsBoard node ...");
    // Attempt to connect (clientId, username, password)
    if ( client.connect("ESP8266 Device", TOKEN, NULL) ) {
      Serial.println( "[DONE]" );
    } else {
      Serial.print( "[FAILED] [ rc = " );
      Serial.print( client.state() );
      Serial.println( " : retrying in 5 seconds]" );
      // Wait 5 seconds before retrying
      delay( 5000 );
    }
  }
}
