#include <Wire.h>
#include <SPI.h>
#include <Adafruit_Sensor.h>
#include "Adafruit_BME680.h"
#include <PubSubClient.h>
#include <ESP8266WiFi.h>
#include <SoftwareSerial.h>
SoftwareSerial pmsSerial(2, 3);

#define BME_SCK 13
#define BME_MISO 12
#define BME_MOSI 11
#define BME_CS 10
#define SEALEVELPRESSURE_HPA (1013.25)

Adafruit_BME680 bme; // I2C
//Adafruit_BME680 bme(BME_CS); // hardware SPI
//Adafruit_BME680 bme(BME_CS, BME_MOSI, BME_MISO,  BME_SCK);

#define WIFI_AP "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
#define WIFI_PASSWORD "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

#define TOKEN "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

char thingsboardServer[] = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";

WiFiClient wifiClient;

PubSubClient client(wifiClient);

int status = WL_IDLE_STATUS;
unsigned long lastSend;

void setup() {
  // our debugging output
  Serial.begin(115200);
  while (!Serial);
  Serial.println(F("BME680"));
 
  // sensor baud rate is 9600
  pmsSerial.begin(9600);

  delay(10);
  InitWiFi();
  client.setServer( thingsboardServer, 1883 );
  lastSend = 0;

  if (!bme.begin()) {
    Serial.println("Could not find a valid BME680 sensor, check wiring!");
    while (1);
  }

  // Set up oversampling and filter initialization
  bme.setTemperatureOversampling(BME680_OS_8X);
  bme.setHumidityOversampling(BME680_OS_2X);
  bme.setPressureOversampling(BME680_OS_4X);
  bme.setIIRFilterSize(BME680_FILTER_SIZE_3);
  bme.setGasHeater(320, 150); // 320*C for 150 ms
  
}
 
struct pms5003data {
  uint16_t framelen;
  uint16_t pm10_standard, pm25_standard, pm100_standard;
  uint16_t pm10_env, pm25_env, pm100_env;
  uint16_t particles_03um, particles_05um, particles_10um, particles_25um, particles_50um, particles_100um;
  uint16_t unused;
  uint16_t checksum;
};
 
struct pms5003data data;

void loop()
{
  if ( !client.connected() ) {
    reconnect();
  }

  if (readPMSdata(&pmsSerial)) {
    
  }
  
  if ( millis() - lastSend > 20000 ) { // Update and send only after 20 seconds
    getAndSendTemperatureAndHumidityData();
    lastSend = millis();
  }

  client.loop();
}

void getAndSendTemperatureAndHumidityData()
{
  Serial.println("Collecting data.");
  float t = (bme.temperature - 2.3);
  float p = (bme.pressure / 100.0);
  float h = (bme.humidity);
  float g = (bme.gas_resistance / 1000.0);    
  float a = (bme.readAltitude(SEALEVELPRESSURE_HPA));
  float pm1 = (data.pm10_standard);
  float pm2 = (data.pm25_standard);
  float pm3 = (data.pm100_standard);

  // Check if any reads failed and exit early (to try again).
  if (isnan(t) || isnan(p) || isnan(h) || isnan(g) || isnan(a) || isnan(pm1) || isnan(pm2) || isnan(pm3)) {
    Serial.println("Failed to read from sensor!");
    return;
  }
  
  if (! bme.performReading()) {
    Serial.println("Failed to perform reading :(");
    return;
  }
  
  Serial.print("Temperature = ");
  Serial.print(bme.temperature);
  Serial.println(" *C");

  Serial.print("Pressure = ");
  Serial.print(bme.pressure / 100.0);
  Serial.println(" hPa");

  Serial.print("Humidity = ");
  Serial.print(bme.humidity);
  Serial.println(" %");

  Serial.print("Gas = ");
  Serial.print(bme.gas_resistance / 1000.0);
  Serial.println(" KOhms");

  Serial.print("Approx. Altitude = ");
  Serial.print(bme.readAltitude(SEALEVELPRESSURE_HPA));
  Serial.println(" m");
  
  Serial.print("Concentration Units (standard)");
  Serial.print("PM 1.0: "); Serial.print(data.pm10_standard);
  Serial.print("\t\tPM 2.5: "); Serial.print(data.pm25_standard);
  Serial.println("\t\tPM 10: "); Serial.println(data.pm100_standard);

  String temperature = String(t);
  String pressure = String(p);
  String humidity = String(h);
  String gas = String(g);
  String altitude = String(a);
  String pms1 = String(pm1);
  String pms2 = String(pm2);
  String pms3 = String(pm3);

  // Just debug messages
  Serial.print( "Sending data : [" );
  Serial.print( t ); Serial.print( "," );
  Serial.print( p ); Serial.print( "," );
  Serial.print( h ); Serial.print( "," );
  Serial.print( g ); Serial.print( "," );
  Serial.print( a ); Serial.print( "," );
  Serial.print( pms1 ); Serial.print( "," );
  Serial.print( pms2 ); Serial.print( "," );
  Serial.print( pms3 );
  Serial.println( "]   -> " );

  // Prepare a JSON payload string
  String payload = "{";
  payload += "\"t\":"; payload += t; payload += ",";
  payload += "\"p\":"; payload += p; payload += ",";
  payload += "\"h\":"; payload += h; payload += ",";
  payload += "\"g\":"; payload += g; payload += ",";
  payload += "\"a\":"; payload += a; payload += ",";
  payload += "\"pms1\":"; payload += pms1;
  payload += "\"pms2\":"; payload += pms2;
  payload += "\"pms3\":"; payload += pms3;
  payload += "}";

  // Send payload
  char attributes[100];
  payload.toCharArray( attributes, 100 );
  client.publish( "v1/devices/me/telemetry", attributes );
  Serial.println( attributes );

}

void InitWiFi()
{
  Serial.println("Connecting to AP ...");
  // attempt to connect to WiFi network

  WiFi.begin(WIFI_AP, WIFI_PASSWORD);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("Connected to AP");
}


void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    status = WiFi.status();
    if ( status != WL_CONNECTED) {
      WiFi.begin(WIFI_AP, WIFI_PASSWORD);
      while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
      }
      Serial.println("Connected to AP");
    }
    Serial.print("Connecting to ThingsBoard node ...");
    // Attempt to connect (clientId, username, password)
    if ( client.connect("ESP8266 Device", TOKEN, NULL) ) {
      Serial.println( "[DONE]" );
    } else {
      Serial.print( "[FAILED] [ rc = " );
      Serial.print( client.state() );
      Serial.println( " : retrying in 5 seconds]" );
      // Wait 5 seconds before retrying
      delay( 5000 );
    }
  }
}

boolean readPMSdata(Stream *s) {
  if (! s->available()) {
    return false;
  }
  
  // Read a byte at a time until we get to the special '0x42' start-byte
  if (s->peek() != 0x42) {
    s->read();
    return false;
  }
 
  // Now read all 32 bytes
  if (s->available() < 32) {
    return false;
  }
    
  uint8_t buffer[32];    
  uint16_t sum = 0;
  s->readBytes(buffer, 32);
 
  // get checksum ready
  for (uint8_t i=0; i<30; i++) {
    sum += buffer[i];
  }
 
  /* debugging
  for (uint8_t i=2; i<32; i++) {
    Serial.print("0x"); Serial.print(buffer[i], HEX); Serial.print(", ");
  }
  Serial.println();
  */
  
  // The data comes in endian'd, this solves it so it works on all platforms
  uint16_t buffer_u16[15];
  for (uint8_t i=0; i<15; i++) {
    buffer_u16[i] = buffer[2 + i*2 + 1];
    buffer_u16[i] += (buffer[2 + i*2] << 8);
  }
 
  // put it into a nice struct :)
  memcpy((void *)&data, (void *)buffer_u16, 30);
 
  if (sum != data.checksum) {
    Serial.println("Checksum failure");
    return false;
  }
  // success!
  return true;
}
